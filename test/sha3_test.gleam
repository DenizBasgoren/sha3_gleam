import gleam/list
import gleeunit
import gleeunit/should
import input_block.{type InputBlock}
import sha3
import state.{type State}
import types.{to_listbits}

pub fn main() {
  gleeunit.main()
}

// gleeunit test functions end in `_test`
pub fn hello_world_test() {
  1
  |> should.equal(1)
}

fn to_state(state: String) -> State {
  state
  |> to_listbits
  |> state.new
}

fn to_inputblock(str: String, flavor: types.Sha3Flavor) -> InputBlock {
  str
  |> to_listbits
  |> input_block.new(flavor)
}

pub fn rho_test() {
  let a =
    "1011010111011100110110111111110000001100101010110111000000010000
    0011110000010011110010100010000100111110101011110110000011111111
    1101111110000100001011110011011001010111000001111110010001010101
    0010101101110100101110000111010010101111011111111101101101011000
    0101001001101011011110100000000010010011101101111110001101110010
    1011111000001001100100100101100001101011011110010110010101111110
    0000111100000011000011010111110001100011000110001011010100000010
    1100101011010111111100110001001100111111000010011011010010011000
    1011011001111111001100111001001001011001100001001011101110000110
    0000000100111110010110000011101001101000111011000100101100001110
    0100101011111000110100100111110100110101001000101010011110001010
    1000101100101010111110101010010101110100001100110111011110111110
    1101010001101111110110001101000110010001111000010000001000110010
    0111110011100011100000100100101110110100101100010110100011011010
    0100100111000110110000101001001011111000001010100010010001010010
    0001000111101100010101111110011100000011110011100001011100111010
    0011011111110010011100101000110010101010111101000100111110010010
    1001100010111101100111000010101100011001010001111110001110010000
    0100001111111000101000000001111101000100011001110100110011111000
    0000100000011110101011100111011000101100101111101111010001010110
    1101100011000100001110100010000100000011110010111011011110001010
    0100111101000011101010000000111000101001011101010101010111101000
    1000111110110000010111000101010100111010100111100000100100011101
    0111110011100111010000110101000001010101001101010010100001011110
    1001010111110101011100101110001101101010101001101101110111111000"
    |> to_state

  let b =
    "1011010111011100110110111111110000001100101010110111000000010000
    1001111000001001111001010001000010011111010101111011000001111111
    0111111000010000101111001101100101011100000111111001000101010111
    1111011111111101101101011000001010110111010010111000011101001010
    0111011011111100011011100100101001001101011011110100000000010010
    1000011010110111100101100101011111101011111000001001100100100101
    1101011111000110001100011000101101010000001000001111000000110000
    0110001100101011010111111100110001001100111111000010011011010010
    1111111001100111001001001011001100001001011101110000110101101100
    1100010010110000111000000001001111100101100000111010011010001110
    0100100101011111000110100100111110100110101001000101010011110001
    1110111110100010110010101011111010101001010111010000110011011101
    0001101000110010001111000010000001000110010110101000110111111011
    0101100010110100011011010011111001110001110000010010010111011010
    0010010111110000010101000100100010100100100100111000110110000101
    1111001110000001111001110000101110011101000010001111011000101011
    1001010001100101010101111010001001111100100100011011111110010011
    1100011100100001001100010111101100111000010101100011001010001111
    0011101001100111110000100001111111000101000000001111101000100011
    0101011000001000000111101010111001110110001011001011111011110100
    1110110111100010101101100011000100001110100010000100000011110010
    0001001111010000111010100000001110001010010111010101010101111010
    0111110110000010111000101010100111010100111100000100100011101100
    1110011101000011010100000101010100110101001010000101111001111100
    0111011111100010010101111101010111001011100011011010101010011011"
    |> to_state

  should.equal(state.rho(a), b)
}

pub fn pi_test() {
  let a =
    "0101111101110011000101111010001011000111010111100000001011110111
    1001111001010001011010110010010011100110101000100000001001011001
    0000010110001111001101010101100110011000101010100001011011111111
    0110010000001001011101100000011000100010001111000000101011010001
    0100000111001111001000010110101011111111011001000111010101001101
    1011011101100100101101111010010111101011111010110000110111100101
    0101110110101010101111011001100001101111000100010001110101100111
    0011101011010100001011101100111011011101000011000010011111101101
    0010101100110110101110111111001111100010110000100101101001111000
    0011101001100111000100111110010011010111101100000010010000001000
    0100110101000010010101110101110101000010011010011100100011010100
    1100010100000001001000111000101111101010000110011010000000101011
    1010000010000101001110110100010011110100000010100110010010111100
    1001101100110110001011001001000000010110000010101111110001101100
    1110011000101000001110100110000100110010110111011001001011000111
    1110001101001100010101010011010111000110011100100000010110011001
    1010010111101100100011010110011100100111110100111100111001010011
    1010101000110010100100011001100101110110110000110101010101010000
    1110000111100011010111101000100101001001010000100011100110101101
    1010010111110100101010100001110000100111111011110001000001000111
    0100010001100100011001110111001110110011000100010100010100110000
    0000110100010100100001100100100010010101011011011000101100111001
    0010010110011111001111000010010110001111000100000001110001110010
    1101000000111111110001100111100010100101101100011111101011010010
    1100110000011110011111000101111010100111011111010101100001111111"
    |> to_state

  let b =
    "0101111101110011000101111010001011000111010111100000001011110111
    0101110110101010101111011001100001101111000100010001110101100111
    1010000010000101001110110100010011110100000010100110010010111100
    1110000111100011010111101000100101001001010000100011100110101101
    1100110000011110011111000101111010100111011111010101100001111111
    0110010000001001011101100000011000100010001111000000101011010001
    0011101001100111000100111110010011010111101100000010010000001000
    0100110101000010010101110101110101000010011010011100100011010100
    1010010111101100100011010110011100100111110100111100111001010011
    0010010110011111001111000010010110001111000100000001110001110010
    1001111001010001011010110010010011100110101000100000001001011001
    0011101011010100001011101100111011011101000011000010011111101101
    1001101100110110001011001001000000010110000010101111110001101100
    1010010111110100101010100001110000100111111011110001000001000111
    0100010001100100011001110111001110110011000100010100010100110000
    0100000111001111001000010110101011111111011001000111010101001101
    1011011101100100101101111010010111101011111010110000110111100101
    1100010100000001001000111000101111101010000110011010000000101011
    1010101000110010100100011001100101110110110000110101010101010000
    1101000000111111110001100111100010100101101100011111101011010010
    0000010110001111001101010101100110011000101010100001011011111111
    0010101100110110101110111111001111100010110000100101101001111000
    1110011000101000001110100110000100110010110111011001001011000111
    1110001101001100010101010011010111000110011100100000010110011001
    0000110100010100100001100100100010010101011011011000101100111001"
    |> to_state

  should.equal(state.pi(a), b)
}

pub fn chi_test() {
  let a =
    "1110100011001001100110011100100010110001010001100001010011100101
    0110110011011001010101000111110110110010100100010110000100110001
    0110010111101010100110100101110111010000111110010011000100110101
    1010001001111100001101010101111001110001111101111001101000111010
    1001101111111100001001100101101110101000011011100110011111011100
    0110011001111101011100101000110001100010100001101011101101011111
    1010000101111100010111100111101000111010001010000010100001101011
    0000000001010111000100010110011011000010101111000011101100001001
    1010001101000110100110011011101111101100000101100000000110101000
    1110101111111001110100100100010001011010101010000011110001010000
    1101100010000000001000000111010101111100111110101010101001001010
    0000100001100000000010110111000100011000001011010101111001111111
    0001111100111001111110010001110000101001001111110001011001101000
    1111010011111101011000011100000001111010100001010110001010111000
    0001111000111010011111101110100101101000101000010101000011001010
    0010100011101010101000101101010111111000001011101111110110010001
    1010000011101101100010111110000001000111101010010111111000011101
    1001010011001000111010000011111110001100100110001000000101011010
    1001011111100101111011100111111111011001011101010000001111001101
    1101001011010010010100011111111001001111000010110010010111100011
    1001110110110101001111111000000110000101000100000001100011110001
    1001011011000110010001001101000110111110100010110011010011010100
    1000111010111001110101000111001110111110001011011100001101011001
    0111101101111011011000101001011011111010110011011110110010110100
    1101101010111001010011010011001110001110001010101010101001111000"
    |> to_state

  let b =
    "1110100111101011000100111100100011110001001011100000010011100001
    1110111011001101011100010111111110010011100101111110101100111011
    0111110001101010100110000101110001011000111100010101010011110001
    1100001001111101101011001101111001100000111101111000101000011011
    1001111111101100011000100110111010101010111111110000011011001100
    0110011001111110011100111000100010100010000100101010100001011111
    0000001001111100110101101110001100010110001010100010100011001011
    0100100011101110010100110010001011010000000101000000011101011001
    1010011101000010101110010011001111001100000100001000001010100111
    0110101011111001110111100011011001000010100000000011110001110000
    1100111110011001110100000111100101011101111010001010101001001010
    1110100010100100000010111011000101001010101011010011111011101111
    0001010100111011111001110011010100101001000111110000011000101010
    0011010001111101011000011101010001101110110111111100100010111000
    0001111001011010011101011110100101101000101001000000010011111111
    0011110011101010110000101100101001110000001111100111110011010011
    1010001111001000100011011010000000010110110011000111110010011000
    1101010011011010111110011011111110001010100100101010010101111000
    1011111111001101010011000111111001101001010100011101101111011101
    0101001011010111010110001101111001001000100010100010011111101111
    1001010110001100101011111010001110000101001101001101101111111000
    1110011110000100011001100101010111111110010010110001100001110000
    0000111000111001110110010101001010111010000011111100000100010001
    0111111001111111010100000001011011111011110111011111110000110101
    1101100011111011000011010110001110110100101000011000111001111100"
    |> to_state

  should.equal(state.chi(a), b)
}

pub fn theta_test() {
  let a =
    "0111100011101010000100111100100011110001001011100000010011100000
    1110111011001101011100010111111110010011100101111110101100111011
    0111110001101010100110000101110001011000111100010101010011110001
    1100001001111101101011001101111001100000111101111000101000011011
    1001111111101100011000100110111010101010111111110000011011001100
    0110011001111110011100111000100010100010000100101010100001011111
    0000001001111100110101101110001100010110001010100010100011001011
    0100100011101110010100110010001011010000000101000000011101011001
    1010011101000010101110010011001111001100000100001000001010100111
    0110101011111001110111100011011001000010100000000011110001110000
    1100111110011001110100000111100101011101111010001010101001001010
    1110100010100100000010111011000101001010101011010011111011101111
    0001010100111011111001110011010100101001000111110000011000101010
    0011010001111101011000011101010001101110110111111100100010111000
    0001111001011010011101011110100101101000101001000000010011111111
    0011110011101010110000101100101001110000001111100111110011010011
    1010001111001000100011011010000000010110110011000111110010011000
    1101010011011010111110011011111110001010100100101010010101111000
    1011111111001101010011000111111001101001010100011101101111011101
    0101001011010111010110001101111001001000100010100010011111101111
    1001010110001100101011111010001110000101001101001101101111111000
    1110011110000100011001100101010111111110010010110001100001110000
    0000111000111001110110010101001010111010000011111100000100010001
    0111111001111111010100000001011011111011110111011111110000110101
    1101100011111011000011010110001110110100101000011000111001111100"
    |> to_state

  let b =
    "1011100110100101001011000010100010011110000101010101111111001011
    0110101100001000101010100111110000100000111110101101001000010000
    0111010001001011111010111010110011010111001111001011111011110000
    0000100110010000011011100111111011001111111010001111000000011000
    0011001100101001111001001001011110000111101001001011000111001111
    1010011100110001010011000110100011001101001010011111001101110100
    1000011110111001000011011110000010100101010001110001000111100000
    0100000011001111001000001101001001011111110110011110110101011000
    0110110010101111011110111001001101100011000011111111100010100100
    1100011000111100010110001100111101101111110110111000101101110011
    0000111011010110111011111001100100110010110100111111000101100001
    0110110101100001110100001011001011111001110000000000011111000100
    0001110100011010100101001100010110100110110100101110110000101011
    1111111110010000101000110111010011000001110000001011001010111011
    1011001010011111111100110001000001000101111111111011001111111100
    1111110110100101111111010010101000011111000001010010011111111000
    0010011000001101010101101010001110100101101000010100010110110011
    1101110011111011100010100100111100000101010111110100111101111001
    0111010000100000100011101101111011000110010011101010000111011110
    1111111000010010110111100010011101100101110100011001000011101100
    0101010011000011100100000100001111101010000011111000000011010011
    0110001001000001101111010101011001001101001001100010000101011011
    0000011000011000101010101010001000110101110000100010101100010000
    1011010110010010100100101011011001010100110000101000011000110110
    0111010000111110100010111001101010011001111110100011100101111111"
    |> to_state

  should.equal(state.theta(a), b)
}

pub fn iota_test() {
  let a =
    "0101010100010010001100110010000010110010100010111001100000101000
    1010001010010101110101000100111100010011101011000001011111001111
    1011000000010110101100100011110001100001101001100010010001011010
    0010101101111010000101100010110101000011011100100100110101101110
    0100111100011011010001111000101011110001000111100110111001100010
    1100011110010100101011111101000110000011110111000110110110100011
    1100011001000011111101100101101101100010110000100000101011011101
    0000000000011111000010111001001000101110001011101001001101001010
    1101001111111110101000110000111011110101101111111011110101001111
    0101101010110100101111011110110011101111111001000010110110101101
    1011011011100011000100011010010000000011100011000001010001100011
    0111001101011000010010001100011100111001011001001001111111011100
    1101010110001101101010000001001010100011000001110000001101000001
    1111100111010010010110110101010100011110101011011000001101111000
    0000101011100000110001000010011111010100010100110001001010000110
    0001001111101011011001100010011101001111100010000001111110001001
    1100111101101101110100001100001011110111000001001011111111100111
    0010000110000011011101100111101110110110001111011110111111010111
    1100011100110010110001010010010011011101110110000101110001111111
    0111000011001010010001111011010110100100001000010000100110101010
    0111001011000111011100001000111011011011010011100101001000100110
    0001111000000100000000011011000001110100001100110100111101111010
    1100100101000011011101110011001011101111100010111100101110110111
    0101011101111111111000101111001111000110011000101011101011011011
    1010101011111001000100111010000110011100011110110001100000001000"
    |> to_state

  let b =
    "1100010100010011001100110010000110110010100010111001100000101000
    1010001010010101110101000100111100010011101011000001011111001111
    1011000000010110101100100011110001100001101001100010010001011010
    0010101101111010000101100010110101000011011100100100110101101110
    0100111100011011010001111000101011110001000111100110111001100010
    1100011110010100101011111101000110000011110111000110110110100011
    1100011001000011111101100101101101100010110000100000101011011101
    0000000000011111000010111001001000101110001011101001001101001010
    1101001111111110101000110000111011110101101111111011110101001111
    0101101010110100101111011110110011101111111001000010110110101101
    1011011011100011000100011010010000000011100011000001010001100011
    0111001101011000010010001100011100111001011001001001111111011100
    1101010110001101101010000001001010100011000001110000001101000001
    1111100111010010010110110101010100011110101011011000001101111000
    0000101011100000110001000010011111010100010100110001001010000110
    0001001111101011011001100010011101001111100010000001111110001001
    1100111101101101110100001100001011110111000001001011111111100111
    0010000110000011011101100111101110110110001111011110111111010111
    1100011100110010110001010010010011011101110110000101110001111111
    0111000011001010010001111011010110100100001000010000100110101010
    0111001011000111011100001000111011011011010011100101001000100110
    0001111000000100000000011011000001110100001100110100111101111010
    1100100101000011011101110011001011101111100010111100101110110111
    0101011101111111111000101111001111000110011000101011101011011011
    1010101011111001000100111010000110011100011110110001100000001000"
    |> to_state

  should.equal(state.iota(a, 10), b)
}

pub fn padding1_test() {
  let a =
    "00010110 10100110 00110110 00110110 11110110"
    |> to_listbits

  let b =
    "0001011010100110001101100011011011110110011000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000001"
    |> to_listbits

  should.equal(sha3.add_padding(a, types.Sha384), b)
}

pub fn padding2_test() {
  let a =
    ""
    |> to_listbits

  let b =
    "0110000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000001"
    |> to_listbits

  should.equal(sha3.add_padding(a, types.Sha256), b)
}

pub fn padding3_test() {
  let flavor = types.Shake256(types.to_unsigned_int(40))

  let a =
    "11001010 	10100110 	00100110 	00000100 	10101110 	00101110 	00000100 	00001110 	10100110 	01001110 	11001110 	00001110 	10010110 	11000110 	10010110 	10000110 	00101110 	10010110 	11001110 	00000100 	10101110 	01110110 	00100110 	10100110 	00000100 	11110110 	10110110 	01110110 	10010110 	11001110 	00000100 	10010110 	11001110 	00101110 	10100110 	00000100 	01110110 	10000110 	00101110 	10101110 	11001110 	00000100 	10100110 	01001110 	01001110 	11110110 	01001110 	00000100 	11001110 	10010110 	00101110 	00000100 	01101110 	11110110 	00110110 	10101110 	00001110 	00101110 	10000110 	00101110 	10100110 	10110110 	00000100 	10000110 	11000110 	11000110 	10101110 	11001110 	10000110 	01110110 	00101110 	10010110 	10101110 	10110110 	00000100 	00100110 	11110110 	00110110 	11110110 	01001110 	10100110 	10110110 	10001110 	10101110 	10100110 	00000100 	00110110 	10000110 	10101110 	00100110 	10000110 	01110110 	00101110 	10010110 	10101110 	10110110 	00110100 	00000100 	00101110 	11110110 	00101110 	10000110 	10110110 	00000100 	01001110 	10100110 	10110110 	00000100 	10000110 	00001110 	10100110 	01001110 	10010110 	10000110 	10110110 	00110100 	00000100 	10100110 	10000110 	10001110 	10101110 	10100110 	00000100 	10010110 	00001110 	11001110 	10000110 	00000100 	10001110 	10101110 	10000110 	10100110 	00000100 	10000110 	01000110 	00000100 	10010110 	00110110 	00110110 	11110110 	00000100 	10010110 	01110110 	01101110 	10100110 	01110110 	00101110 	11110110 	01001110 	10100110 	00000100 	01101110 	10100110 	01001110 	10010110 	00101110 	10000110 	00101110 	10010110 	11001110 	00000100 	10100110 	00101110 	00000100 	10001110 	10101110 	10000110 	11001110 	10010110 	00000100 	10000110 	01001110 	11000110 	00010110 	10010110 	00101110 	10100110 	11000110 	00101110 	11110110 	00000100 	01000110 	10100110 	10000110 	00101110 	10000110 	10100110 	00000100 	01101110 	10010110 	00101110 	10000110 	10100110 	00000100 	00100110 	10010110 	11000110 	00101110 	10000110 	00000100 	11001110 	10101110 	01110110 	00101110 	00000100 	10100110 	00011110 	00001110 	00110110 	10010110 	11000110 	10000110 	01000110 	11110110 	01110100 	00000100 	01110010 	10100110 	10110110 	11110110 	00000100 	10100110 	01110110 	10010110 	10110110 	00000100 	10010110 	00001110 	11001110 	10000110 	10110110 	00000100 	01101110 	11110110 	00110110 	10101110 	00001110 	00101110 	10000110 	00101110 	10100110 	10110110 	00000100 	10001110 	10101110 	10010110 	10000110 	00000100 	01101110 	11110110 	00110110 	10101110 	00001110 	00101110 	10000110 	11001110 	00000100 	11001110 	10010110 	00101110 	00000100 	10000110 	11001110 	00001110 	10100110 	01001110 	01110110 	10000110 	00101110 	10101110 	01001110 	00000100 	10000110 	10101110 	00101110 	00000100 	11110110 	00100110 	10010110 	00101110 	00000100 	10000110 	10101110 	00101110 	00000100 	01100110 	10101110 	11100110 	10010110 	00101110 	00110100 	00000100 	11001110 	10100110 	00100110 	00000100 	10001110 	10101110 	10010110 	10000110 	00000100 	11000110 	11110110 	01110110 	11001110 	10100110 	10001110 	10101110 	10101110 	01110110 	00101110 	10101110 	01001110 	00000100 	10110110 	10000110 	11100110 	01110110 	10010110 	00000100 	00100110 	11110110 	00110110 	11110110 	01001110 	10100110 	11001110 	00000100 	10100110 	11110110 	11001110 	00000100 	10001110 	10101110 	10010110 	00000100 	01001110 	10000110 	00101110 	10010110 	11110110 	01110110 	10100110 	00000100 	01101110 	11110110 	00110110 	10101110 	00001110 	00101110 	10000110 	00101110 	10100110 	10110110 	00000100 	11001110 	10100110 	10001110 	10101110 	10010110 	00000100 	01110110 	10100110 	11001110 	11000110 	10010110 	10101110 	01110110 	00101110 	01110100"
    |> to_listbits
    |> sha3.add_padding(flavor)
    |> sha3.split_to_input_blocks(flavor)

  let b =
    [



    ]
    |> list.map(to_inputblock(_, flavor))
  should.equal(a, b)
}
// this test crashes Gleam because it takes too long to finish. The same code run in main gives the correct result, and doesnt crash.
// pub fn sha3_1_test() {
//   "he在"
//   |> types.utf8_to_bits
//   |> sha3.sha3(types.Shake256(types.to_unsigned_int(4000)))
//   |> types.hash_to_hexstring(":")
//   |> should.equal(
//     "64:AA:98:AC:BE:93:6F:45:AC:D4:E5:9A:BA:0C:1B:CE:D6:BD:38:51:FE:6A:64:ED:44:B9:6E:C3:A7:88:D6:B4:76:12:4F:8F:37:92:69:A8:11:CF:11:76:53:6B:4B:B3:16:92:91:66:0C:F0:67:B9:07:E1:AF:B7:70:E2:08:72:C5:C9:E4:20:51:3D:0C:63:B8:AB:48:82:A4:CC:A7:E8:14:08:02:04:AB:2D:5C:20:F7:46:5A:E2:26:DA:B4:A5:5D:8B:B3:30:BA:E4:82:DC:7D:40:10:A8:A0:22:70:C8:17:AC:2D:F4:9A:B2:5D:2E:12:38:83:BD:E8:A5:B2:CE:E3:46:AE:41:CD:EA:2F:FC:44:9F:D7:E9:74:6B:8F:38:4E:B9:4D:74:C5:22:72:A0:C1:55:7D:35:A6:9E:98:60:18:FE:ED:22:BD:A4:0C:57:39:7A:6C:9D:A9:FD:D6:1B:89:C3:E6:AB:62:79:87:B3:AA:FD:A5:DB:EF:23:55:20:2A:13:42:EC:8D:20:82:DA:F8:EE:10:8B:2E:83:10:4E:91:0B:C7:70:C0:8D:61:59:FB:CC:D7:56:C9:FF:B9:28:0C:D1:A5:31:F4:A6:5B:0F:D4:37:C6:97:EF:16:E7:D2:68:01:DF:4D:74:E4:59:74:BC:E8:68:20:97:C9:A4:16:13:EC:B4:71:8E:76:CF:A7:01:5B:56:E7:66:24:52:43:DB:FB:8C:7B:EB:49:4A:CE:34:C1:09:92:4D:17:70:00:99:EA:6A:F5:E4:D7:0E:51:BD:EC:8E:09:C5:46:5C:1B:47:28:31:E8:F6:A3:E7:97:70:CC:F7:DF:78:6C:13:E0:83:EA:02:31:C5:3F:65:A2:46:3B:C8:E5:74:C6:0C:7D:07:99:74:F1:A6:DC:B1:40:96:F0:55:F8:D0:66:3D:38:67:61:18:12:2C:64:43:73:5A:67:6A:54:04:BC:F8:BB:EA:4F:B0:B3:49:C4:62:70:D2:A3:F2:7A:15:1E:AD:94:09:91:60:1A:9A:DA:90:3C:8F:C0:0E:3C:75:E4:F9:52:C8:FA:B2:5C:E5:04:E7:20:71:92:6C:86:28:6C:25:0F:08:96:F1:BB:0A:D1:D0:A4:A9:E4:49:3D:A3:E2:71:92:BC:FA:8B:89:79:D4:C1:20:AF:31:F5:1B:7E:52:CE:71:A0:EA:9B:92:8E:D4:77:A4:DA:5D:02:3E:F2:18:18:2F:E7:2A:8F:46:D3:6C:26:92:0B:A5:D5:04:2B:2B:50:3B:67:DD:04:45:97:85:4F:00:C1:BE:F5:AE:5A:DA:DD:99:2E:D9:4E:5F",
//   )
// }

// this test crashes Gleam because it takes too long to finish. The same code run in main gives the correct result, and doesnt crash.
// pub fn sha3_2_test() {
//   "he在"
//   |> types.utf8_to_bits
//   |> sha3.sha3(types.Sha224)
//   |> types.hash_to_hexstring(":")
//   |> should.equal(
//     "AE:BA:DB:2D:96:27:F7:B6:5A:6C:E4:7A:33:6E:79:E7:FC:B8:B2:BC:95:9C:51:E5:63:CD:0B:FA",
//   )
// }
